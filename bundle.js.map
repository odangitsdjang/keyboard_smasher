{"version":3,"sources":["webpack:///webpack/bootstrap 0edbfda2b045dc6f6529","webpack:///./js/components.js","webpack:///./js/onclicks.js","webpack:///./js/entry.js","webpack:///./js/canvas.js","webpack:///./game/beatmap.js","webpack:///./songs/Cartoon-Immortality.json","webpack:///./game","webpack:///./js/game_finished.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;AC7D6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;ACpTA;AACA;;AAEA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,2BAA2B,+BAA+B,gDAAgD;AAC1G,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACnHA;AACA;AACA;AACA;AACA,WAAW,EAAE;;AAEb,gDAAgD;AAChD;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oBAAoB,+BAA+B,iDAAiD;AACpG,eAAe,uBAAuB;AACtC;AACA;AACA;AACA,yBAAyB,YAAY;AACrC;AACA,YAAY,wBAAwB;AACpC;AACA,YAAY,wBAAwB;AACpC;AACA,YAAY,wBAAwB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;;AAER;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;;;;;;;;;;ACxDA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;;;AAIA;;;AAGA;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,GAAG;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AClGA,kBAAkB,4BAA4B,yzB;;;;;;ACA9C;AACA;AACA;AACA,uCAAuC,WAAW;AAClD;AACA;AACA,2B;;;;;;;ACNA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,+BAA+B;AAC1D,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,kCAAkC,mBAAmB;AACrD;AACA,2CAA2C,4BAA4B;AACvE;;AAEA;AACA,6BAA6B,IAAI,IAAI,oCAAoC;AACzE;AACA,OAAO;;AAEP;AACA;AACA;;;AAGA;AACA","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0edbfda2b045dc6f6529","import {INTERVAL_MILLISECOND} from './entry';\nconst COMPONENT_RADIUS = 30;\nconst COMPONENT_COUNT = 3;\nconst GAME_COMPONENT_SPEED = 9;\nconst HEIGHT_FROM_BOTTOM = 60;\nconst QCOLOR = \"#AA00FF\";\nconst WCOLOR = \"#00AAFF\";\nconst ECOLOR = \"#FFAA00\";\n// health.style.fontSize = \"20px\";\n// .style.width = \"10px\";\n// Make this class scalable so that if I want to change it later\n// then I can just change the numbers up at the top\nclass Components {\n\n  // Use get so that you can use the constant without parenthesis\n  // i.e. Components.componentRadius\n  static get componentRadius() {\n    return COMPONENT_RADIUS;\n  }\n  // If 3 components, then divide 4 sections to center it evenly in the center\n  static drawUserComponents(ctx, canvas, options) {\n    for (let i = 0; i < COMPONENT_COUNT; i++) {\n      this.drawBeatComponent(ctx, canvas, i, options);\n    }\n  }\n\n\n  static addGameComponents(ctx, canvas, options) {\n    if (options.songAudio.currentTime) {\n      if (options.songAudio.currentTime > 3 && options.songAudio.currentTime < 5) {\n        options.directions.style.color = \"rgb(150,150,150)\";\n      } else if (options.songAudio.currentTime > 5) {\n        options.directions.style.color = \"rgb(50,50,50)\";\n      }\n      Object.keys(options.beatMapData.beatmaps).forEach(key => {\n        options.beatMapData.beatmaps[key].forEach( secondVal => {\n          if (secondVal >= options.songAudio.currentTime &&\n              secondVal < options.songAudio.currentTime+INTERVAL_MILLISECOND/1000 ) {\n                options.activeComponents[key].push(0);\n                // optimization because when we create beatmap we sorted it\n                // so we are guaranteed to only have one beatmap per key\n                return;\n              }\n        });\n      });\n    }\n  }\n  // options.activeComponents = {\n  // q: [position]\n  // w: [position, position],\n  // e: [position, position, position]\n  // }\n\n  // method assumes that array will be kept in reversed order (which it should)\n  // because it adds on like a queue\n  static removeGameComponents(ctx, canvas, options, health) {\n    Object.keys(options.activeComponents).forEach(key=> {\n      // makes sure to only use the last game element in each column\n      const lastComponent = options.activeComponents[key][0];\n      if ((this.amazing(lastComponent, key, canvas, options, health)) ||\n          (this.great(lastComponent, key, canvas, options, health)) ||\n          (this.good(lastComponent, key, canvas, options, health)) ||\n          (this.bad(lastComponent, key, canvas, options, health)) ||\n          (this.miss(lastComponent, key, canvas, options, health))) {\n        // delete the element from active components\n        options.activeComponents[key].shift();\n      }\n    });\n  }\n\n  static renderGameComponents(ctx, canvas, options, health) {\n    this.addGameComponents(ctx, canvas, options);\n    this.removeGameComponents(ctx, canvas, options, health);\n    Object.keys(options.activeComponents).forEach(key=> {\n      options.activeComponents[key].forEach((pos,i)=> {\n\n        options.activeComponents[key][i] += GAME_COMPONENT_SPEED;\n        let loc = 0;\n        if (key === \"q\") {\n          ctx.fillStyle = QCOLOR;\n          loc = 0;\n        }\n        else if (key === \"w\") {\n          ctx.fillStyle = WCOLOR;\n          loc = 1;\n        }\n        else if (key === \"e\") {\n          ctx.fillStyle = ECOLOR;\n          loc = 2;\n        }\n\n        ctx.beginPath();\n        const canvasWidth = canvas.width;\n        const canvasHeight = canvas.height;\n        ctx.arc( canvasWidth/(COMPONENT_COUNT+1) +\n        (canvasWidth/(COMPONENT_COUNT+1) * loc), pos, COMPONENT_RADIUS,\n          0, Math.PI*2, true);\n        ctx.fill();\n        ctx.closePath();\n      });\n    });\n  }\n\n  static drawBeatComponent(ctx, canvas, location, options) {\n    ctx.beginPath();\n    const canvasWidth = canvas.width;\n    const canvasHeight = canvas.height;\n    ctx.arc( canvasWidth/(COMPONENT_COUNT+1) +\n    (canvasWidth/(COMPONENT_COUNT+1) * location), canvasHeight-HEIGHT_FROM_BOTTOM, COMPONENT_RADIUS,\n      0, Math.PI*2, true);\n    ctx.fillStyle = \"#000000\";\n    this.changeColor(ctx, location, options);\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  static changeColor(ctx, i, options) {\n    if (options.qHeld && i === 0) {\n      ctx.fillStyle = QCOLOR;\n    } else if (options.wHeld && i === 1) {\n      ctx.fillStyle = WCOLOR;\n    } else if (options.eHeld && i === 2) {\n      ctx.fillStyle = ECOLOR;\n    }\n  }\n\n  static drawHitResponse(ctx, canvas, options) {\n    if (options.hitResponse.value) {\n      if (options.hitResponse.frames <= 45) {\n        ctx.font = 50 - options.hitResponse.frames + \"px Open Sans\";\n      } else if (options.hitResponse.frames > 45) {\n        options.hitResponse.value = \"\";\n      }\n      options.hitResponse.frames++;\n      ctx.fillStyle = \"#000000\";\n      ctx.fillText(options.hitResponse.value, canvas.width/2 - 100, canvas.height/2-20);\n    }\n  }\n\n  static drawScore(ctx, canvas, options) {\n    // const gradient=ctx.createLinearGradient(0,0,canvas.width,0);\n    // gradient.addColorStop(\"0.8\",\"black\");\n    // gradient.addColorStop(\"0.9\",\"blue\");\n    // gradient.addColorStop(\"1.0\",\"magenta\");\n    // ctx.fillStyle = gradient;\n    ctx.font = \"22px Open Sans\";\n    ctx.fillStyle = \"#000000\";\n    ctx.fillText(\"Score: \"+options.score, canvas.width-180, 65);\n  }\n\n  static drawStreak(ctx, canvas, options) {\n    ctx.font = \"22px Open Sans\";\n    ctx.fillStyle = \"#000000\";\n    ctx.fillText(\"Streak: \"+options.streak.value, canvas.width-180, 95);\n  }\n\n  static miss(pos, key, canvas, options, health) {\n    if ( pos > canvas.height ) {\n      options.hitResponse.value = \"miss\";\n      options.hitResponse.frames = 0;\n      options.hitResponse.count.Miss++;\n      let healthVal = parseInt(window.getComputedStyle(health).width);\n      healthVal -= 50;\n      healthVal = healthVal < 0 ? 0 : healthVal ;\n      if (healthVal <= 0) options.gameOver = 1;\n      health.style.width = healthVal+'px';\n      if (options.streak.value > options.streak.highest)\n        options.streak.highest = options.streak.value;\n      options.streak.value = 0;\n      if (options.score >= 10) options.score -= 10;\n      return true;\n    }\n    return false;\n  }\n\n  // only remove bad if it's past the user space\n  static bad(pos, key, canvas, options, health) {\n    let retVal = 0;\n    if (key === \"q\" && options.qUp.value) {\n      if (pos < canvas.height - HEIGHT_FROM_BOTTOM - (COMPONENT_RADIUS*3))\n        retVal = 1;\n      else if (pos > canvas.height - HEIGHT_FROM_BOTTOM + COMPONENT_RADIUS)\n        retVal = 2;\n    } else if (key === \"w\" && options.wUp.value) {\n      if (pos < canvas.height - HEIGHT_FROM_BOTTOM - (COMPONENT_RADIUS*3))\n        retVal = 1;\n      else if (pos > canvas.height - HEIGHT_FROM_BOTTOM + COMPONENT_RADIUS)\n        retVal = 2;\n    } else if (key === \"e\" && options.eUp.value) {\n      if (pos < canvas.height - HEIGHT_FROM_BOTTOM - (COMPONENT_RADIUS*3))\n        retVal = 1;\n      else if (pos > canvas.height - HEIGHT_FROM_BOTTOM + COMPONENT_RADIUS)\n        retVal = 2;\n    }\n    if (retVal) {\n      options.hitResponse.value = \"Bad\";\n      options.hitResponse.frames = 0;\n      options.hitResponse.count.Bad++;\n      let healthVal = parseInt(window.getComputedStyle(health).width);\n      healthVal -= 30;\n      healthVal = healthVal < 0 ? 0 : healthVal ;\n      if (healthVal <= 0) options.gameOver = 1;\n      health.style.width = healthVal+'px';\n      if (options.streak.value > options.streak.highest)\n        options.streak.highest = options.streak.value;\n      options.streak.value = 0;\n      if (options.score >= 5) options.score -= 5;\n    }\n    if (retVal === 1) retVal = 0;\n    return retVal;\n\n  }\n\n  static good(pos, key, canvas, options, health) {\n    let retVal = false;\n    if (key === \"q\" && options.qUp.value) {\n      // The bottom part of the component is touching the top part of user area\n      if (pos > canvas.height - HEIGHT_FROM_BOTTOM - (COMPONENT_RADIUS*3)\n          && pos < canvas.height - HEIGHT_FROM_BOTTOM + COMPONENT_RADIUS)\n        retVal = true;\n    } else if (key === \"w\" && options.wUp.value) {\n      if (pos > canvas.height - HEIGHT_FROM_BOTTOM - (COMPONENT_RADIUS*3)\n          && pos < canvas.height - HEIGHT_FROM_BOTTOM + COMPONENT_RADIUS)\n        retVal = true;\n    } else if (key === \"e\" && options.eUp.value) {\n      if (pos > canvas.height - HEIGHT_FROM_BOTTOM - (COMPONENT_RADIUS*3)\n          && pos < canvas.height - HEIGHT_FROM_BOTTOM + COMPONENT_RADIUS)\n        retVal = true;\n    }\n    if (retVal) {\n      options.hitResponse.value = \"Good\";\n      options.hitResponse.frames = 0;\n      options.hitResponse.count.Good++;\n      let healthVal = parseInt(window.getComputedStyle(health).width);\n      healthVal += 10;\n      healthVal = healthVal >= 400 ? 400 : healthVal;\n      health.style.width = healthVal+'px';\n      options.streak.value++;\n      if (options.streak.value > options.streak.highest)\n        options.streak.highest = options.streak.value;\n      options.score += 20;\n    }\n    return retVal;\n  }\n\n  static great(pos, key, canvas, options, health) {\n    let retVal = false;\n    if (key === \"q\" && options.qUp.value) {\n      if (pos > canvas.height - HEIGHT_FROM_BOTTOM - (COMPONENT_RADIUS*2)\n          && pos < canvas.height - HEIGHT_FROM_BOTTOM )\n        retVal = true;\n    } else if (key === \"w\" && options.wUp.value) {\n      if (pos > canvas.height - HEIGHT_FROM_BOTTOM - (COMPONENT_RADIUS*2)\n          && pos < canvas.height - HEIGHT_FROM_BOTTOM )\n        retVal = true;\n    } else if (key === \"e\" && options.eUp.value) {\n      if (pos > canvas.height - HEIGHT_FROM_BOTTOM - (COMPONENT_RADIUS*2)\n          && pos < canvas.height - HEIGHT_FROM_BOTTOM )\n        retVal = true;\n    }\n    if (retVal) {\n      options.hitResponse.value = \"Great!\";\n      options.hitResponse.frames = 0;\n      options.hitResponse.count.Great++;\n      let healthVal = parseInt(window.getComputedStyle(health).width);\n      healthVal += 15;\n      healthVal = healthVal >= 400 ? 400 : healthVal;\n      health.style.width = healthVal+'px';\n      options.streak.value++;\n      if (options.streak.value > options.streak.highest)\n        options.streak.highest = options.streak.value;\n      options.score += 30;\n    }\n    return retVal;\n  }\n\n  static amazing(pos, key, canvas, options, health) {\n    let retVal = false;\n    if (key === \"q\" && options.qUp.value) {\n      if (pos > canvas.height - HEIGHT_FROM_BOTTOM - (COMPONENT_RADIUS*1.3)\n          && pos < canvas.height - HEIGHT_FROM_BOTTOM + COMPONENT_RADIUS*(0.666) )\n        retVal = true;\n    } else if (key === \"w\" && options.wUp.value) {\n      if (pos > canvas.height - HEIGHT_FROM_BOTTOM - (COMPONENT_RADIUS*1.3)\n          && pos < canvas.height - HEIGHT_FROM_BOTTOM + COMPONENT_RADIUS*(0.666) )\n        retVal = true;\n    } else if (key === \"e\" && options.eUp.value) {\n      if (pos > canvas.height - HEIGHT_FROM_BOTTOM - (COMPONENT_RADIUS*1.3)\n          && pos < canvas.height - HEIGHT_FROM_BOTTOM + COMPONENT_RADIUS*(0.666) )\n        retVal = true;\n    }\n    if (retVal) {\n      options.hitResponse.value = \"Amazing!!\";\n      options.hitResponse.frames = 0;\n      options.hitResponse.count.Amazing++;\n      let healthVal = parseInt(window.getComputedStyle(health).width);\n      healthVal += 20;\n      healthVal = healthVal >= 400 ? 400 : healthVal;\n      health.style.width = healthVal+'px';\n      options.streak.value++;\n      if (options.streak.value > options.streak.highest)\n        options.streak.highest = options.streak.value;\n      options.score += 50;\n    }\n    return retVal;\n  }\n}\n\nexport default Components;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/components.js\n// module id = 0\n// module chunks = 0","import BeatMap from '../game/beatmap';\nclass OnClickUtil {\n\n  static resetSong(options, ctx) {\n    options.score = 0;\n    options.streak = {value: 0, highest: 0 };\n    options.activeComponents = {\n      q: [],\n      w: [],\n      e: []\n    };\n    options.hitResponse = { value: \"\", frames: 0, count: {Amazing: 0, Great: 0, Good: 0, Bad: 0, Miss: 0 } };\n    options.streakResponse = { value: 0, frames: 0, highest: 0 };\n    options.finishedGameFrame = 0;\n    options.gameOver = 0;\n    let health = document.querySelector(\".bar\");\n    health.style.width = \"400px\";\n  }\n  static songLinks(ctx, canvas, options) {\n\n    const stopSong = (opt, context) => {\n      opt.songAudio.pause();\n      opt.songAudio.currentTime = 0;\n      this.resetSong(opt, context);\n    };\n\n    const songs = document.getElementsByTagName('a');\n    for(let i = 0; i < songs.length; i++) {\n      songs[i].onclick = () => {\n        if (songs[i].getAttribute('data-link')) {\n          const songLink = songs[i].getAttribute('data-link');\n          if (options.songAudio)\n            stopSong(options, ctx);\n          options.songAudio = new Audio(songLink);\n          options.songAudio.play();\n          new BeatMap(options, ctx, songLink).play();\n        } else {\n          // should be replaced\n          stopSong(options);\n        }\n      };\n    }\n  }\n\n  // This method was used to begin to tackle the problem\n  // written in problems.md #1-2\n  static handleKeyFrames(options) {\n    const FRAMES_BEFORE_SWITCHING = 1;\n    if (options.qUp.value) {\n      if (options.qUp.frames === FRAMES_BEFORE_SWITCHING) {\n        options.qUp.frames = 0;\n        options.qUp.value = false;\n      } else {\n        options.qUp.frames++;\n      }\n    }\n    if (options.wUp.value) {\n      if (options.wUp.frames === FRAMES_BEFORE_SWITCHING) {\n        options.wUp.frames = 0;\n        options.wUp.value = false;\n      } else {\n        options.wUp.frames++;\n      }\n    }\n    if (options.eUp.value) {\n      if (options.eUp.frames === FRAMES_BEFORE_SWITCHING) {\n        options.eUp.frames = 0;\n        options.eUp.value = false;\n      } else {\n        options.eUp.frames++;\n      }\n    }\n  }\n\n  static keyPressedLinks(options) {\n    function keyDownHandler(e) {\n      if (e.keyCode === 81) {\n        options.qHeld = true;\n        options.qUp.value = true;\n        options.qUp.frames = 0;\n      }\n      else if (e.keyCode === 87) {\n        options.wHeld = true;\n        options.wUp.value = true;\n        options.wUp.frames = 0;\n      }\n      else if (e.keyCode === 69) {\n        options.eHeld = true;\n        options.eUp.value = true;\n        options.eUp.frames = 0;\n      }\n    }\n\n    function keyUpHandler(e) {\n      if (e.keyCode === 81) {\n        options.qHeld = false;\n      }\n      else if (e.keyCode === 87) {\n        options.wHeld = false;\n      }\n      else if (e.keyCode === 69) {\n        options.eHeld = false;\n      }\n    }\n\n    document.addEventListener(\"keydown\", keyDownHandler, false);\n    document.addEventListener(\"keyup\", keyUpHandler, false);\n  }\n\n  static addAllLinks(ctx, canvas, options) {\n    OnClickUtil.songLinks(ctx, canvas, options);\n    OnClickUtil.keyPressedLinks(options);\n  }\n}\n\nexport default OnClickUtil;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/onclicks.js\n// module id = 1\n// module chunks = 0","import components from './components';\nimport Canvas from './canvas';\nimport OnClickUtil from './onclicks';\nimport GameFinished from './game_finished';\n// import { }  from '../game/algorithm';\n\n// export const INTERVAL_MILLISECOND = 6.944444;   144hz\n// 60hz\nexport const INTERVAL_MILLISECOND = 16.666666;\n\n// currentPlayTime\ndocument.addEventListener('DOMContentLoaded', () => {\n    // options.activeComponents = {\n    // q: [position]\n    // w: [position, position],\n    // e: [position, position, position]\n    // }\n    const directions = document.getElementById(\"direction\");\n    const options = {\n      songAudio: 0,\n      beatMapData: 0,\n      activeComponents: {\n        q: [],\n        w: [],\n        e: []\n      },\n      score: 0,\n      hitResponse: { value: \"\", frames: 0, count: {Amazing: 0, Great: 0, Good: 0, Bad: 0, Miss: 0 }},\n      streak: { value: 0, highest: 0 },\n      finishedGameFrame: 0,\n      gameOver: 0,\n      gameSuccess: 0,\n      userAreaResponse: { frames: 0 },\n      qHeld: false,\n      qUp: {value: false, frames:0 },\n      wHeld: false,\n      wUp: {value: false, frames:0 },\n      eHeld: false,\n      eUp: {value: false, frames:0 },\n      directions: directions\n    };\n    const canvas = document.getElementById(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    OnClickUtil.addAllLinks(ctx, canvas, options);\n    const g = new GameFinished(ctx, canvas, options);\n    // const drawing = setInterval((e) => {\n    //   OnClickUtil.handleKeyFrames(options);\n    //   Canvas.draw(ctx, canvas, options);\n    //\n    // }, INTERVAL_MILLISECOND);\n\n    requestAnimationFrame(e=>{\n      Canvas.draw(ctx, canvas, options, g);\n    });\n    // clear interval  when game over?\n});\n// console.log(options.songAudio.currentTime);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/entry.js\n// module id = 2\n// module chunks = 0","import Components from './components';\nimport OnClickUtil from './onclicks';\nclass Canvas {\n  static drawHealthBar() {\n\n  }\n\n  static draw(ctx, canvas, options, g) {\n    let health = document.querySelector(\".bar\");\n    if (!options.gameOver) {\n      OnClickUtil.handleKeyFrames(options);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      Components.drawScore(ctx, canvas, options);\n      Components.drawStreak(ctx, canvas, options);\n      Components.drawHitResponse(ctx, canvas, options);\n      Components.renderGameComponents(ctx, canvas, options, health);\n      Components.drawUserComponents(ctx, canvas, options);\n    } else {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }\n    g.renderGameFinished();\n    requestAnimationFrame(e=>{\n      Canvas.draw(ctx, canvas, options, g);\n    });\n\n  }\n\n\n\n}\n\n\nexport default Canvas;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/canvas.js\n// module id = 3\n// module chunks = 0","import Components from '../js/components';\nimport OnClickUtil from '../js/onclicks';\nconst beatmap1 = require('../songs/Cartoon-Immortality.json');\nconst OFFSET_TO_HIT_USER_AREA = 1;\n// this class still needs work to allow multiple songs\nclass BeatMap {\n  constructor(options, ctx) {\n    this.options = options;\n    this.ctx = ctx;\n  }\n  // Given the bpm get an array of seconds where there is a new measure\n  increments(bpm) {\n    return  (1 / (bpm/60));\n  }\n\n  // chorus section = [[begin, end], [begin, end]]\n  makeBeatMap(tracknum) {\n    this.songData(tracknum);\n    let current = this.measure;\n    const retArr = [];\n    let i = 0;\n    while (i < this.songLengthSeconds) {\n      // subtract 2 : moving at 9 pixels, we want to achieve 540 pixels down\n      // and at 60 hz, we can move 540 pixels down per second, so\n      // that's why we have a 1 second offset\n\n      // break\n      for (let j = 0; j < this.break.length; j++) {\n        if  (this.break[j][0]-OFFSET_TO_HIT_USER_AREA <= i && i <= this.break[j][1]-OFFSET_TO_HIT_USER_AREA) {\n          while (i <= this.break[j][1] - OFFSET_TO_HIT_USER_AREA) {\n            current += this.measure;\n            i += this.measure;\n\n          }\n          continue;\n        }\n      }\n\n      // chorus\n      for (let j = 0; j < this.chorus.length; j++) {\n        if (this.chorus[j][0]-OFFSET_TO_HIT_USER_AREA <= i && i <= this.chorus[j][1]-OFFSET_TO_HIT_USER_AREA) {\n          retArr.push(current -OFFSET_TO_HIT_USER_AREA);\n          current += this.measure/2;\n          i += this.measure/2;\n          continue;\n        }\n      }\n\n      if (current-2 > 0)\n        retArr.push(current-OFFSET_TO_HIT_USER_AREA);\n\n      current += this.measure;\n      i+= this.measure;\n    }\n    // inplace shuffle retArr\n    this.shuffle(retArr);\n    const data = {beatmaps: {}};\n    data.beatmaps[\"q\"] = retArr.slice(0, retArr.length/3).sort((a,b)=>a-b);\n    data.beatmaps[\"w\"] = retArr.slice(retArr.length/3, 2*retArr.length/3).sort((a,b)=>a-b);\n    data.beatmaps[\"e\"] = retArr.slice(2 * retArr.length/3).sort((a,b)=>a-b);\n    console.log(data);\n    return data;\n  }\n\n  play() {\n    // OnClickUtil.resetSongPoints(this.options, this.ctx);\n    this.options.beatMapData = this.makeBeatMap(1);\n  }\n\n  shuffle(arr) {\n    for (let i = arr.length; i; i--) {\n      let j = Math.floor(Math.random() * i);\n      [arr[i - 1], arr[j]] = [arr[j], arr[i - 1]];\n    }\n  }\n\n  songData(tracknum) {\n    if (tracknum === 1) {\n      // const songLengthSeconds = this.options.songAudio.duration;\n      // for some reason duration returns NaN (I guess it happens too fast)\n      this.songLengthSeconds = 230 - 1;  // subtract 2 to end beatmap 4 seconds earlier\n      this.chorus = [[68,90], [145, 167]];  // find the chorus manually from mp3\n      this.bpm = 173.939;\n      this.break = [[5,10]];\n    }\n    this.measure = this.increments(this.bpm);\n  }\n\n  // this function doesn't work because you cannot dynamically require files in javascript..\n  grabData() {\n\n    // Add more file extensions here as needed\n    const extensionIndex = /(mp3|wav)$/.exec(this.songLink).index;\n    this.beatMapLink = \".\".concat(this.songLink.slice(0, extensionIndex).concat(\"json\"));\n    this.data = require(this.beatMapLink);\n  }\n}\n\nexport default BeatMap;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./game/beatmap.js\n// module id = 4\n// module chunks = 0","module.exports = {\"bpm\":\"173.939\",\"beatmaps\":{\"q\":[1,1.1,1.3,2.2,2.371439,3.3,3.5,3.7,3.9,4,4.1,4.4,5.5,6.6],\"w\":[1.25,1.35,1.45,1.55,1.65,2.3772],\"e\":[0.10453664790530048,0.4494851643392228,0.7944336807731451,1.139382197207067,1.484330713640989,1.8292792300749108,2.1742277465088327,2.5191762629427545,2.8641247793766764,3.2090732958105983,3.55402181224452,3.898970328678442,4.243918845112364,4.588867361546286,4.933815877980208,5.2787643944141305,5.623712910848052,5.968661427281974,6.313609943715896,6.658558460149818,7.00350697658374,7.348455493017662,7.693404009451584,8.038352525885506,8.383301042319427,8.72824955875335,9.073198075187271,9.418146591621193,9.763095108055115,10.108043624489037,10.452992140922959,10.79794065735688,11.142889173790802,11.487837690224724,11.832786206658646,12.177734723092568,12.52268323952649,12.867631755960412,13.212580272394334]}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./songs/Cartoon-Immortality.json\n// module id = 5\n// module chunks = 0","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 6;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./game\n// module id = 6\n// module chunks = 0","const GAME_OVER_SOUND_LINK = \"./songs/gameover.wav\";\n\nclass GameFinished {\n  constructor(ctx, canvas, options) {\n    this.options = options;\n    this.canvas = canvas;\n    this.ctx = ctx;\n  }\n\n  gameSuccess() {\n    if (this.options.songAudio.currentTime && this.options.songAudio.duration) {\n      if (this.options.songAudio.currentTime >= this.options.songAudio.duration - 2)\n        return true;\n    }\n    return false;\n  }\n\n  renderGameFinished() {\n    if (this.gameSuccess() || this.options.gameOver) {\n      const keys = Object.keys(this.options.hitResponse.count);\n      if (this.options.finishedGameFrame < 30) {\n        this.ctx.font = `${this.options.finishedGameFrame}px Open Sans`;\n      } else {\n          this.ctx.font = `30px Open Sans`;\n      }\n      this.ctx.fillStyle = \"#000000\";\n      const heightInc = 45;\n      let height =  (2*this.canvas.height/10);\n      const successOrGameOver = this.options.gameOver ? \"Game Over!\" : \"Success!\";\n\n      if (this.options.finishedGameFrame === 0) {\n        this.options.songAudio.pause();\n        this.options.songAudio.currentTime = 0;\n        if (this.options.gameOver) {\n          // only make this play once\n          this.options.songAudio = new Audio(GAME_OVER_SOUND_LINK);\n          this.options.songAudio.play();\n        } else {\n          // SUCCESS SONG WILL GO IN HERE\n        }\n      }\n\n      this.ctx.fillText(successOrGameOver,\n        this.canvas.width/2 - 100, height+=heightInc);\n      this.ctx.fillText(`Score: ${this.options.score}`,\n        this.canvas.width/2 - 100, height+=heightInc);\n      this.ctx.fillText(`Longest Streak: ${this.options.streak.highest}`,\n        this.canvas.width/2 - 100, height+=heightInc);\n\n      keys.forEach(key =>  {\n        this.ctx.fillText(`${key}: ${this.options.hitResponse.count[key]}`,\n           this.canvas.width/2 - 100, height+=heightInc);\n      });\n\n      this.options.finishedGameFrame++;\n    }\n  }\n\n\n}\nexport default GameFinished;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/game_finished.js\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}